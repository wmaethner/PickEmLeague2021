/* tslint:disable */
/* eslint-disable */
/**
 * PickEmLeague
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Game,
    GameFromJSON,
    GameToJSON,
} from '../models';

export interface GameDeleteDeleteRequest {
    id?: number;
}

export interface GameGetGetRequest {
    id?: number;
}

export interface GameUpdatePutRequest {
    game?: Game;
}

/**
 * 
 */
export class GameApi extends runtime.BaseAPI {

    /**
     */
    async gameCreatePostRaw(): Promise<runtime.ApiResponse<Game>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Game/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     */
    async gameCreatePost(): Promise<Game> {
        const response = await this.gameCreatePostRaw();
        return await response.value();
    }

    /**
     */
    async gameDeleteDeleteRaw(requestParameters: GameDeleteDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Game/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameDeleteDelete(requestParameters: GameDeleteDeleteRequest): Promise<void> {
        await this.gameDeleteDeleteRaw(requestParameters);
    }

    /**
     */
    async gameGetAllGetRaw(): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Game/get-all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     */
    async gameGetAllGet(): Promise<Array<Game>> {
        const response = await this.gameGetAllGetRaw();
        return await response.value();
    }

    /**
     */
    async gameGetGetRaw(requestParameters: GameGetGetRequest): Promise<runtime.ApiResponse<Game>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Game/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     */
    async gameGetGet(requestParameters: GameGetGetRequest): Promise<Game> {
        const response = await this.gameGetGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async gameUpdatePutRaw(requestParameters: GameUpdatePutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Game/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GameToJSON(requestParameters.game),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameUpdatePut(requestParameters: GameUpdatePutRequest): Promise<void> {
        await this.gameUpdatePutRaw(requestParameters);
    }

}

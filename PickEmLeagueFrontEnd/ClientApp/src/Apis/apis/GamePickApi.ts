/* tslint:disable */
/* eslint-disable */
/**
 * PickEmLeague
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GamePick,
    GamePickFromJSON,
    GamePickToJSON,
} from '../models';

export interface GamePickGetGamePickByUserGetRequest {
    userId?: number;
}

export interface GamePickGetGamePickGetRequest {
    id?: number;
}

export interface GamePickGetGamePicksByUserAndWeekGetRequest {
    userId?: number;
    week?: number;
}

export interface GamePickUpdateGamePicksPostRequest {
    gamePick?: Array<GamePick>;
}

/**
 * 
 */
export class GamePickApi extends runtime.BaseAPI {

    /**
     */
    async gamePickGetGamePickByUserGetRaw(requestParameters: GamePickGetGamePickByUserGetRequest): Promise<runtime.ApiResponse<Array<GamePick>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GamePick/getGamePickByUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GamePickFromJSON));
    }

    /**
     */
    async gamePickGetGamePickByUserGet(requestParameters: GamePickGetGamePickByUserGetRequest): Promise<Array<GamePick>> {
        const response = await this.gamePickGetGamePickByUserGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async gamePickGetGamePickGetRaw(requestParameters: GamePickGetGamePickGetRequest): Promise<runtime.ApiResponse<GamePick>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GamePick/getGamePick`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GamePickFromJSON(jsonValue));
    }

    /**
     */
    async gamePickGetGamePickGet(requestParameters: GamePickGetGamePickGetRequest): Promise<GamePick> {
        const response = await this.gamePickGetGamePickGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async gamePickGetGamePicksByUserAndWeekGetRaw(requestParameters: GamePickGetGamePicksByUserAndWeekGetRequest): Promise<runtime.ApiResponse<Array<GamePick>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.week !== undefined) {
            queryParameters['week'] = requestParameters.week;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GamePick/getGamePicksByUserAndWeek`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GamePickFromJSON));
    }

    /**
     */
    async gamePickGetGamePicksByUserAndWeekGet(requestParameters: GamePickGetGamePicksByUserAndWeekGetRequest): Promise<Array<GamePick>> {
        const response = await this.gamePickGetGamePicksByUserAndWeekGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async gamePickUpdateGamePicksPostRaw(requestParameters: GamePickUpdateGamePicksPostRequest): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/GamePick/updateGamePicks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.gamePick?.map(GamePickToJSON),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async gamePickUpdateGamePicksPost(requestParameters: GamePickUpdateGamePicksPostRequest): Promise<boolean> {
        const response = await this.gamePickUpdateGamePicksPostRaw(requestParameters);
        return await response.value();
    }

}
